# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Le génie logiciel pour un ingénieur en Machine Learning
#+AUTHOR: Kévin CAYE
#+LANGUAGE: fr

# reveal options: see https://github.com/yjwen/org-reveal
#+REVEAL_ROOT: http://cdn.jsdelivr.net/reveal.js/3.0.0/
#+REVEAL_TRANS: none
#+OPTIONS: reveal_center:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 0 ## all header on same lvl
#+REVEAL_SPEED: fast
# #+REVEAL_EXTRA_CSS: ./extra.css
#+REVEAL_EXTRA_JS: 

* TODO TODO                                                        :noexport:
Faire un peut en mode time line
- définir science des données
- sorti de l'ensimag: git et c++
- thèse: programmation fonctionnel
- prestation: mise en production par des web service
- present the service oriented Architechture: [[https://en.wikipedia.org/wiki/Service-oriented_architecture][wikipedia]] 
 - Pourquoi on fait ca dans l'équipe AAI (présenter l'équipe AAI)
Expliquer à chaque fois les notions: c'est quoi et à quoi ca sert

Objectif: montrer les différents cas de figure que j'ai rencontrer pour dans mon
expérience. Je ne veux pas etre exhaustif mais peut être que mon expérience
pourra vous aider dans des situations similaires.

Commencer par mon profile et mes attentes dans mon boulot. Présenter mes
expérience avec leur contexte, les problèmes et les solutions apporté. point
clée:
- développer des méthodes mathématiques (stage fin d'étude)
  - première erreur: le c++ c'est super rapide dont je dev en c++. chercher à
    optimiser trop tôt
  - j'itère sans faire de test: on sait rapidement plus ou on en ai ! Même quand
    on dev un prototype c'est pas pour de la production ! il faut faire des
    tests ! au moins sur le coeur algorithmique. Pas des test unitaires plutôt
    tester des situations.
- thèses: 
  - les model en data sciences
    - les données: idéal avoir 3 niveaux model génératif, model simulé mais plus
      compliqué, données réelles
  - la programmation en data science: fonctionnel
    - faire une comparaison d'un model implémenté en object et un en fonctionnel ?
  - La reproductibilité en science
- Schneider electric
  - devops
  - parler de ca: [[https://en.wikipedia.org/wiki/Cross-industry_standard_process_for_data_mining][Cross-industry standard process for data mining]]
  - parler de du TDD même pour les explorations: see [[https://github.com/drivendataorg/power-laws-cold-start/tree/80d612b3ab881647f5a8b6a13960e81985630dc0/1st%2520Place/team-member-a-execute-first#start-of-the-challenge][power-laws-cold-start]]
  - organization: trouver ca facon de fonctionner: montrer mon workflow. Comment
    mes dossiers sont organisé et les outils que j'utilise: git lfs pour les
    data + donnée intermediaire
- Remarques en vrac
  - la gestion du model est très importante ! 
  - avant c'est surtout les chercheurs qui avait des données
  - maintenant il y en a partout en industrie
  - la mesure de l'erreur est super important.
    - definir ce qu'on veut mesurer TODO
    - Pour ne pas se tromper il faut être rigoureux ! Et donc organiser, comment
      decouper le dataset ?
  - parler du piege des notebooks ! et du manque de test unitaire en phase
    d'exploration. 
*Plan*
- Definition des data science et de l'ingénieur en datascience (proposer ma
  définition), en particulier en industrie avec des examples. Donner aussi des
  exemples en science.
- Proposition d'un workflow.
- Définir les problématiques de chaque étapes et apporter une proposition de
  solutions et les outils utilisé.
- Conclusions et take away messages.

* Mon parcourt
:LOGBOOK:
- Note taken on [2018-11-13 Tue 16:56] \\
  where to code come https://freefrontend.com/css-timelines/#horizontal-timelines
- Note taken on [2018-11-13 Tue 16:56] \\
  make an html iframe
:END:
#+BEGIN_EXPORT html
<section class="timeline">
  <ol>
    <li>
      <div>
        <time>1934</time> At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium At vero eos et accusamus et iusto odio dignissimos ducimus qui blanditiis praesentium
      </div>
    </li>
    <li>
      <div>
        <time>1937</time> Proin quam velit, efficitur vel neque vitae, rhoncus commodo mi. Suspendisse finibus mauris et bibendum molestie. Aenean ex augue, varius et pulvinar in, pretium non nisi.
      </div>
    </li>
    <li>
      <div>
        <time>1940</time> Proin iaculis, nibh eget efficitur varius, libero tellus porta dolor, at pulvinar tortor ex eget ligula. Integer eu dapibus arcu, sit amet sollicitudin eros.
      </div>
    </li>
    <li>
      <div>
        <time>1943</time> In mattis elit vitae odio posuere, nec maximus massa varius. Suspendisse varius volutpat mattis. Vestibulum id magna est.
      </div>
    </li>
    <li>
      <div>
        <time>1946</time> In mattis elit vitae odio posuere, nec maximus massa varius. Suspendisse varius volutpat mattis. Vestibulum id magna est.
      </div>
    </li>
    <li>
      <div>
        <time>1956</time> In mattis elit vitae odio posuere, nec maximus massa varius. Suspendisse varius volutpat mattis. Vestibulum id magna est.
      </div>
    </li>
    <li>
      <div>
        <time>1957</time> In mattis elit vitae odio posuere, nec maximus massa varius. Suspendisse varius volutpat mattis. Vestibulum id magna est.
      </div>
    </li>
    <li>
      <div>
        <time>1967</time> Aenean condimentum odio a bibendum rhoncus. Ut mauris felis, volutpat eget porta faucibus, euismod quis ante.
      </div>
    </li>
    <li>
      <div>
        <time>1977</time> Vestibulum porttitor lorem sed pharetra dignissim. Nulla maximus, dui a tristique iaculis, quam dolor convallis enim, non dignissim ligula ipsum a turpis.
      </div>
    </li>
    <li>
      <div>
        <time>1985</time> In mattis elit vitae odio posuere, nec maximus massa varius. Suspendisse varius volutpat mattis. Vestibulum id magna est.
      </div>
    </li>
    <li>
      <div>
        <time>2000</time> In mattis elit vitae odio posuere, nec maximus massa varius. Suspendisse varius volutpat mattis. Vestibulum id magna est.
      </div>
    </li>
    <li>
      <div>
        <time>2005</time> In mattis elit vitae odio posuere, nec maximus massa varius. Suspendisse varius volutpat mattis. Vestibulum id magna est.
      </div>
    </li>
    <li></li>
  </ol>
#+END_EXPORT
* La programmation orienté objet
* La programmation orienté objet
* La programmation fonctionnelle: Définition
:LOGBOOK:
- Note taken on [2018-10-26 Fri 15:58] \\
  read that https://stackoverflow.com/questions/4852251/is-there-a-software-engineering-methodology-for-functional-programming
:END:
- définir
- pourquoi c'est autant utilisé ?
- Vous faite du R ?
* La programmation fonctionnelle: 
* Intégration continue
* Qui je suis ?
- Ancien Ensimag (promotion 2014)
- Thèse en méthodes statistique pour la génétique
- Prestataire de service chez Kaizen Solution
* Plan et objectifs 

*Objectifs*

Comprendre les outils et méthodes de développements utilisés en /Machine
Learning/.

1. Le paysage du /machine learning/
2. Comment mener un projet en /Machine Learning/

#+BEGIN_NOTES
1. Dans une première partie on va expliquer ce qu'est que le machine learning:
  - ou il est utilisé
  - quelle sont les différentes branches
2. On verra comment un projet peut se développer du début a la fin
   - ca sera l'occasion de voir les outils et méthode de travaille
#+END_NOTES
* 1. Le paysage du /machine learning/
** Qu'est ce que le /Machine Learning/ ?
** Pourquoi utiliser le /Machine Learning/ ? 
** Apprentissage supervisé
** Apprentissage non supervisé
** Apprentissage semi supervisé
** Apprentissage par renforcement
** Test et validation

On veut estimer l'erreur de notre algorithme quand il sera en production.

*Mesure de l'erreur*

*Données de validation*

*No Free Lunch Theorem*
* 2. Comment mener un projet /Machine Learning/ ?

*Objectif*

Prédire le prix des maisons en Californie.
#+BEGIN_NOTES
Le diable est dans les détails donc je vais tacher de donner ces petit details
d'organisation qui peuvent faire gagner du temps.
#+END_NOTES

** Créer un dossier de travaille et le versionner !
- Créer le projet
#+BEGIN_SRC sh
mkdir california-house-price
cd california-house-price
mkdir -p references/ reports/figures
touch README.md references/.gitkeep reports/figures/.gitkeep 
git init .; git add *; git commit -m "Let s start"
#+END_SRC

- Organiser le projet
#+BEGIN_EXAMPLE
california-house-price
├── Makefile          <- avec des commandes comme `make data` ou `make train`
├── README.md         <- Point de départ pour un nouvel arrivant sur le projet
├── references        <- manuel, présentations, docs, etc
└── reports           <- rapports produit sur le projet, html, latex, pdf, etc 
    └── figures       <- figures produites pour les rapports
#+END_EXAMPLE
** Comprendre le problème
** Choisir la métrique d'évaluation
** Quelles données ?
- Les données du client 
- Des données publiques ? 
- Des données simulées ? 
** Choisir un langage programmation ?
- R ou python ? /les deux/
#+BEGIN_NOTES
A cette étape de prototypage il faut pouvoir avance vite, cet deux langage on
une grosse communauté et des environnements adapté au machine learning.
#+END_NOTES
- Choisir un paradigme de programmation ? 

** Créer un environnement isolé et reproductible 
- python virtual envorinment 
- conda
#+BEGIN_SRC shell

#+END_SRC

** Rassembler données

*Ou ranger les données ?*
#+BEGIN_EXAMPLE
├── data
│   ├── external       <- Data from third party sources.
│   ├── interim        <- Intermediate data that has been transformed.
│   ├── processed      <- The final, canonical data sets for modeling.
│   └── raw            <- The original, immutable data dump.
#+END_EXAMPLE

*Versioner*
- git lfs
- git annex
- etc
** Visualiser les données !!
- Tester les hypothèses sur les données
- Comprendre les corrélations

*Dans des Notebooks*
#+BEGIN_EXAMPLE
├── notebooks                                 <- Jupyter, Rmardown
│   └── 01-first-exploration.ipynb            <- notation `01` pour organiser les notebooks
#+END_EXAMPLE

#+BEGIN_NOTES
- notebooks: il permettent d'aller vite sur l'exploration et de montrer rapidement des résultats.
#+END_NOTES
** Trop de notebooks, tue le notebook
- see notebook war ! 
- quand les utiliser et quand s'arrêter !
** Créer une stratégie d'évaluation

#+BEGIN_NOTES
Critique ! 
#+END_NOTES
** Créer des modèles

C'est partie pour le code !

#+BEGIN_EXAMPLE
├── src                <- Source code for use in this project.
├── models             <- Trained and serialized models, model predictions, or model summaries
#+END_EXAMPLE
- Faire des packages: R et python sont très bien pour ca
- documenter les fonctions: R: Roxygen, python: docstring

*TDD: Test Driven Development*
- python: =pytest=, R: =testthat=
- c'est plus simple en programmation fonctionnel car pas d'effet de bord

** Évaluation des modèles par la validation croisée
** Choix d'un modèle
- Performance
- Facile à mettre en production: 
  - je peux l'intégrer sur la plate-forme de production ?
- Facile à débuguer
  - si le modèle données des mauvaises 
- Interpretable
  - je peux comprendre pourquoi cette prediction ? 
** Déployer le modèle
*Capacités clées*
- Évaluer les données d'entrée
- Fournir les prédictions avec les explications si il y en a
- Signaler une divergence du modèle
- Ré-entrainer le modèle

** Architecture orientée services
*Concepts*

*Exemple: Azure Machine Learning service*

* Références
- https://github.com/drivendata/cookiecutter-data-science
- https://blog.algorithmia.com/becoming-a-10x-data-scientist/#prod
