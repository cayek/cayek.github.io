# -*- coding: utf-8 -*-
# -*- mode: org -*-

#+TITLE: Le g√©nie logiciel pour un ing√©nieur en /Machine Learning/
#+AUTHOR: K√©vin CAYE
#+LANGUAGE: fr

# reveal options: see https://github.com/yjwen/org-reveal
#+REVEAL_ROOT: file:/home/cayek/.src/reveal.js
#+REVEAL_TRANS: none
#+REVEAL_PLUGINS: (highlight notes)
#+OPTIONS: reveal_center:nil num:nil toc:nil
#+OPTIONS: reveal_width:1200 reveal_height:800
#+REVEAL_THEME: white
#+REVEAL_HLEVEL: 0 ## all header on same lvl
#+REVEAL_SPEED: fast
#+REVEAL_EXTRA_CSS: ./extra.css
#+REVEAL_EXTRA_JS: 

* TODO TODO                                                        :noexport:
Faire un peut en mode time line
- d√©finir science des donn√©es
- sorti de l'ensimag: git et c++
- th√®se: programmation fonctionnel
- prestation: mise en production par des web service
- present the service oriented Architechture: [[https://en.wikipedia.org/wiki/Service-oriented_architecture][wikipedia]] 
 - Pourquoi on fait ca dans l'√©quipe AAI (pr√©senter l'√©quipe AAI)
Expliquer √† chaque fois les notions: c'est quoi et √† quoi ca sert

Objectif: montrer les diff√©rents cas de figure que j'ai rencontrer pour dans mon
exp√©rience. Je ne veux pas etre exhaustif mais peut √™tre que mon exp√©rience
pourra vous aider dans des situations similaires.

Commencer par mon profile et mes attentes dans mon boulot. Pr√©senter mes
exp√©rience avec leur contexte, les probl√®mes et les solutions apport√©. point
cl√©e:
- d√©velopper des m√©thodes math√©matiques (stage fin d'√©tude)
  - premi√®re erreur: le c++ c'est super rapide dont je dev en c++. chercher √†
    optimiser trop t√¥t
  - j'it√®re sans faire de test: on sait rapidement plus ou on en ai ! M√™me quand
    on dev un prototype c'est pas pour de la production ! il faut faire des
    tests ! au moins sur le coeur algorithmique. Pas des test unitaires plut√¥t
    tester des situations.
- th√®ses: 
  - les model en data sciences
    - les donn√©es: id√©al avoir 3 niveaux model g√©n√©ratif, model simul√© mais plus
      compliqu√©, donn√©es r√©elles
  - la programmation en data science: fonctionnel
    - faire une comparaison d'un model impl√©ment√© en object et un en fonctionnel ?
  - La reproductibilit√© en science
- Schneider electric
  - devops
  - parler de ca: [[https://en.wikipedia.org/wiki/Cross-industry_standard_process_for_data_mining][Cross-industry standard process for data mining]]
  - parler de du TDD m√™me pour les explorations: see [[https://github.com/drivendataorg/power-laws-cold-start/tree/80d612b3ab881647f5a8b6a13960e81985630dc0/1st%2520Place/team-member-a-execute-first#start-of-the-challenge][power-laws-cold-start]]
  - organization: trouver ca facon de fonctionner: montrer mon workflow. Comment
    mes dossiers sont organis√© et les outils que j'utilise: git lfs pour les
    data + donn√©e intermediaire
- Remarques en vrac
  - la gestion du model est tr√®s importante ! 
  - avant c'est surtout les chercheurs qui avait des donn√©es
  - maintenant il y en a partout en industrie
  - la mesure de l'erreur est super important.
    - definir ce qu'on veut mesurer TODO
    - Pour ne pas se tromper il faut √™tre rigoureux ! Et donc organiser, comment
      decouper le dataset ?
  - parler du piege des notebooks ! et du manque de test unitaire en phase
    d'exploration. 
*Plan*
- Definition des data science et de l'ing√©nieur en datascience (proposer ma
  d√©finition), en particulier en industrie avec des examples. Donner aussi des
  exemples en science.
- Proposition d'un workflow.
- D√©finir les probl√©matiques de chaque √©tapes et apporter une proposition de
  solutions et les outils utilis√©.
- Conclusions et take away messages.

* Qui je suis ?
- Ancien Ensimag (promotion 2014)
- Th√®se en m√©thodes statistique pour la g√©n√©tique
- Prestataire de service chez Kaizen Solution
* Plan et objectifs 

*Objectifs*

Comprendre les outils et m√©thodes de d√©veloppements utilis√©s en /Machine
Learning/.

*Plan*

1. Le paysage du /Machine Learning/
2. Comment mener un projet en /Machine Learning/

#+BEGIN_NOTES
1. Dans une premi√®re partie on va expliquer ce qu'est que le machine learning:
  - ou il est utilis√©
  - quelle sont les diff√©rentes branches
2. On verra comment un projet peut se d√©velopper du d√©but a la fin
   - ca sera l'occasion de voir les outils et m√©thode de travaille
#+END_NOTES
* 1. Le paysage du /machine learning/
:PROPERTIES:
:reveal_background: ./figures/wordle.png
:reveal_background_size: 1000px
:END:
** Qu'est ce que le /Machine Learning/ ?
*Approche traditionnel*
#+HTML: <img src="./figures/traditional_workflow.png" align="middle">

#+BEGIN_NOTES
Exemple: faire un filtre anti spam 
1. on annalyse les spam et on reparque que certain mots cl√©es: gratuit, carte de cr√©dit
2. on √©crit des filtre a la main pour chaque cas
3. on test et on r√©p√®te 
#+END_NOTES
** Qu'est ce que le /Machine Learning/ ?
*Approche /Machine Learning/*
#+HTML: <img src="./figures/ml_workflow.png" align="middle">

#+BEGIN_NOTES
Exemple: 
- on si on fait du machine learning l'algorithme qui detecte les spams va
  chercher a trouver automatiquement les r√®gles qui font qu'in spam est un spam
#+END_NOTES
** Pourquoi utiliser le /Machine Learning/ ?
*Le /machine Learning/ est parfait pour*

- les probl√®mes r√©solus en √©num√©rant un grand nombre de r√®gles
- les probl√®mes tr√®s complexes ou trouver toutes les r√®gles serait impossible
- les probl√®mes ou les r√®gles peuvent changer, ou il faut s'adapter √† de
  nouvelles donn√©es

*Exemples*

- filtre anti spam
- reconnaissance vocale
- d√©tection de fautes sur des machines industrielles

** Apprentissage supervis√©
*Un jeu de donn√©es labellis√©*
#+HTML: <img src="./figures/sup_ml0.png" align="middle">
** Apprentissage supervis√©
*R√©gression*
#+HTML: <img src="./figures/sup_ml1.png" align="middle">
** Apprentissage supervis√©
*Exemples d'algorithme*
- r√©gression lin√©aire
- arbres de d√©cision
- SVM (/Support Vector Machine/)
- r√©seaux de neurones
- et bien d'autres...
** Apprentissage non supervis√©
*Un jeu de donn√©es NON labellis√©*
#+HTML: <img src="./figures/unsup_ml0.png" align="middle">
** Apprentissage non supervis√©
*/Clustering/*
#+HTML: <img src="./figures/unsup_ml1.png" align="middle">
** Apprentissage non supervis√©
Quelques exemples d'algorithme: 

*/Clustering/*
- k-Means
*Visualisation et r√©duction de la dimension*
- Analyse en composant principale
*R√®gle d'association*
- Apriori
#+BEGIN_NOTES
L'id√©e sous jacente est de trouver une structure aux donn√©es, un moyen de les
repr√©senter pour:
- identifier des donn√©es annormals (outlier)
- d√©couvrir que les personnes qui ach√®te de la sauce barbecue et des chips ch√®te
  aussi en g√©n√©ral des steaks ü§ì. 
#+END_NOTES

** Apprentissage semi supervis√©
*Un jeu de donn√©es partiellement labellis√©*
#+HTML: <img src="./figures/semisup_ml0.png" align="middle">
#+BEGIN_NOTES
Exemple classique: 
- quand on charge ses photos sur google photo il reconna√Æt seul les m√™mes
  personnes sur les diff√©rentes photos (clustering).
- il suffit de labelliser une seul fois la personne sur une des photos pour que
  tout le groupe soit labellis√©.
#+END_NOTES
** Test et validation des algorithmes

*Mesure de la performance*
Par exemple l'erreur absolue moyenne:

$$ MAE = \frac{1}{n} \sum_{i =1}^{n} |Y_i - \hat{Y_i}| $$

*Donn√©es de validation*

Ce sont des donn√©es qui n'ont jamais √©t√© vu par les algorithmes, typiquement $20
\%$ des donn√©es.

*No Free Lunch Theorem ([[https://en.wikipedia.org/wiki/No_free_lunch_theorem][wikipedia]])*

Il n'y pas de mod√®le universelle, qui serait le meilleur tout le temps.

* 2. Comment mener un projet /Machine Learning/ ?

*Objectif*

Pr√©dire le prix des maisons en Californie.
#+BEGIN_NOTES
Le diable est dans les d√©tails donc je vais tacher de donner ces petit details
d'organisation qui peuvent faire gagner du temps.
#+END_NOTES

** Cr√©er un dossier de travaille et le versionner !
- Cr√©er le projet
#+BEGIN_SRC sh
mkdir california-house-price
cd california-house-price
mkdir -p references/ reports/figures
touch README.md references/.gitkeep reports/figures/.gitkeep 
git init .; git add *; git commit -m "Let s start"
#+END_SRC

- Organiser le projet
#+BEGIN_EXAMPLE
california-house-price
‚îú‚îÄ‚îÄ Makefile          <- avec des commandes comme `make data` ou `make train`
‚îú‚îÄ‚îÄ README.md         <- Point de d√©part pour un nouvel arrivant sur le projet
‚îú‚îÄ‚îÄ references        <- manuel, pr√©sentations, docs, etc
‚îî‚îÄ‚îÄ reports           <- rapports produit sur le projet, html, latex, pdf, etc 
    ‚îî‚îÄ‚îÄ figures       <- figures produites pour les rapports
#+END_EXAMPLE
** Comprendre le probl√®me
** Choisir la m√©trique d'√©valuation
** Quelles donn√©es ?
- Les donn√©es du client 
- Des donn√©es publiques ? 
- Des donn√©es simul√©es ? 
** Choisir un langage programmation ?
- R ou python ? /les deux/
#+BEGIN_NOTES
A cette √©tape de prototypage il faut pouvoir avance vite, cet deux langage on
une grosse communaut√© et des environnements adapt√© au machine learning.
#+END_NOTES
- Choisir un paradigme de programmation ? 

** Cr√©er un environnement isol√© et reproductible 
- python virtual envorinment 
- conda
#+BEGIN_SRC shell

#+END_SRC

** Rassembler donn√©es

*Ou ranger les donn√©es ?*
#+BEGIN_EXAMPLE
‚îú‚îÄ‚îÄ data
‚îÇ   ‚îú‚îÄ‚îÄ external       <- Data from third party sources.
‚îÇ   ‚îú‚îÄ‚îÄ interim        <- Intermediate data that has been transformed.
‚îÇ   ‚îú‚îÄ‚îÄ processed      <- The final, canonical data sets for modeling.
‚îÇ   ‚îî‚îÄ‚îÄ raw            <- The original, immutable data dump.
#+END_EXAMPLE

*Versioner*
- git lfs
- git annex
- etc
** Visualiser les donn√©es !!
- Tester les hypoth√®ses sur les donn√©es
- Comprendre les corr√©lations

*Dans des Notebooks*
#+BEGIN_EXAMPLE
‚îú‚îÄ‚îÄ notebooks                                 <- Jupyter, Rmardown
‚îÇ   ‚îî‚îÄ‚îÄ 01-first-exploration.ipynb            <- notation `01` pour organiser les notebooks
#+END_EXAMPLE

#+BEGIN_NOTES
- notebooks: il permettent d'aller vite sur l'exploration et de montrer rapidement des r√©sultats.
#+END_NOTES
** Trop de notebooks, tue le notebook
- see notebook war ! 
- quand les utiliser et quand s'arr√™ter !
** Cr√©er une strat√©gie d'√©valuation

#+BEGIN_NOTES
Critique ! 
#+END_NOTES
** Cr√©er des mod√®les

C'est partie pour le code !

#+BEGIN_EXAMPLE
‚îú‚îÄ‚îÄ src                <- Source code for use in this project.
‚îú‚îÄ‚îÄ models             <- Trained and serialized models, model predictions, or model summaries
#+END_EXAMPLE
- Faire des packages: R et python sont tr√®s bien pour ca
- documenter les fonctions: R: Roxygen, python: docstring

*TDD: Test Driven Development*
- python: =pytest=, R: =testthat=
- c'est plus simple en programmation fonctionnel car pas d'effet de bord

** √âvaluation des mod√®les par la validation crois√©e
** Choix d'un mod√®le
- Performance
- Facile √† mettre en production: 
  - je peux l'int√©grer sur la plate-forme de production ?
- Facile √† d√©buguer
  - si le mod√®le donn√©es des mauvaises 
- Interpretable
  - je peux comprendre pourquoi cette prediction ? 
** D√©ployer le mod√®le
*Capacit√©s cl√©es*
- √âvaluer les donn√©es d'entr√©e
- Fournir les pr√©dictions avec les explications si il y en a
- Signaler une divergence du mod√®le
- R√©-entrainer le mod√®le

** Architecture orient√©e services
*Concepts*

*Exemple: Azure Machine Learning service*

* R√©f√©rences
- https://github.com/drivendata/cookiecutter-data-science
- https://blog.algorithmia.com/becoming-a-10x-data-scientist/#prod
